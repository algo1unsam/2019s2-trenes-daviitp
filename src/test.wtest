import trenes.*

describe "Trenes" {
	
	var formacion1
	var formacion2
	var formacion3
	var vagonDeCarga1
	var vagonDeCarga2
	var vagonDeCarga3
	var vagonDeCarga4
	var vagonDeCarga5
	var vagonDeCarga6
	var vagonDePasajeros1
	var vagonDePasajeros2
	var vagonDePasajeros3
	var vagonDePasajeros4
	var vagonDePasajeros5
	var vagonDePasajeros6
	var locomotora1
	var locomotora2
	var locomotora3
	var locomotora4
	var locomotora5
	var locomotora6
	var deposito
	
	fixture {
		
		deposito = new Deposito()
		formacion1 = new Formacion()
		formacion2 = new Formacion()
		formacion3 = new Formacion()
		vagonDeCarga1 = new VagonDeCarga()
		vagonDeCarga2 = new VagonDeCarga()
		vagonDeCarga3 = new VagonDeCarga()
		vagonDeCarga4 = new VagonDeCarga()
		vagonDeCarga5 = new VagonDeCarga()
		vagonDeCarga6 = new VagonDeCarga()
		vagonDePasajeros1 = new VagonDePasajeros()
		vagonDePasajeros2 = new VagonDePasajeros()
		vagonDePasajeros3 = new VagonDePasajeros()
		vagonDePasajeros4 = new VagonDePasajeros()
		vagonDePasajeros5 = new VagonDePasajeros()
		vagonDePasajeros6 = new VagonDePasajeros()
		formacion1 = new Formacion()
		locomotora1 = new Locomotora()
		locomotora2 = new Locomotora()
		locomotora3 = new Locomotora()
		locomotora4 = new Locomotora()
		locomotora5 = new Locomotora()
		locomotora6 = new Locomotora()
				
	}
	
	test "Cuántos vagones livianos hay en una formación" {
		
		formacion1.vagonesDeCarga().add(vagonDeCarga1)
		formacion1.vagonesDeCarga().add(vagonDeCarga2)
		formacion1.vagonesDeCarga().add(vagonDePasajeros1)
		formacion1.vagonesDeCarga().add(vagonDePasajeros2)
	
		vagonDePasajeros1.pasajerosTransportados(20)
		vagonDePasajeros2.pasajerosTransportados(40)
		vagonDeCarga1.cargaTransportada(2000)
		vagonDeCarga2.cargaTransportada(2500)
	
		assert.equals(2,formacion1.vagonesLivianos())
	}

	test "Velocidad mínima de una formación" {
	
		locomotora1.velocidadMaxima(80) 
		locomotora2.velocidadMaxima(70)
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)
	
		assert.equals(70,formacion1.velocidadMaxima())
	}

	test "Eficiencia" {

		locomotora1.peso(1000)
		locomotora2.peso(1500)
		locomotora1.pesoMaximoQueArrastra(5000)
		locomotora2.pesoMaximoQueArrastra(7500)	
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)	
	
		assert.that(formacion1.esEficiente())
		
		locomotora1.peso(1000)
		locomotora2.peso(1500)
		locomotora1.pesoMaximoQueArrastra(5000)
		locomotora2.pesoMaximoQueArrastra(5000)
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)
		
		assert.notThat(formacion1.esEficiente())
	}

	test "Formación puede moverse" {
		
		locomotora1.peso(1000)
		locomotora2.peso(1500)
		locomotora1.pesoMaximoQueArrastra(5000)
		locomotora2.pesoMaximoQueArrastra(7500)
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)
		formacion1.vagonesDeCarga().add(vagonDeCarga1)
		formacion1.vagonesDeCarga().add(vagonDeCarga2)
		formacion1.vagonesDeCarga().add(vagonDePasajeros1)
		formacion1.vagonesDeCarga().add(vagonDePasajeros2)
		vagonDeCarga1.cargaMaxima(2000)
		vagonDeCarga2.cargaMaxima(3000)
		vagonDePasajeros1.ancho(2)
		vagonDePasajeros2.ancho(3)
		vagonDePasajeros1.largo(10)
		vagonDePasajeros2.largo(10)
		vagonDePasajeros1.pasajerosTransportados(20)
		vagonDePasajeros2.pasajerosTransportados(50)
		
		//El peso que arrastra la formación es de 22220
				
		assert.notThat(formacion1.puedeMoverse())
	}
	
	test "Cuántos kilos de empuje faltan" {
		
		locomotora1.peso(1000)
		locomotora2.peso(1500)
		locomotora1.pesoMaximoQueArrastra(5000)
		locomotora2.pesoMaximoQueArrastra(7500)
		formacion1.locomotoras().add(locomotora1)
		formacion1.locomotoras().add(locomotora2)
		formacion1.vagonesDeCarga().add(vagonDeCarga1)
		formacion1.vagonesDeCarga().add(vagonDeCarga2)
		formacion1.vagonesDeCarga().add(vagonDePasajeros1)
		formacion1.vagonesDeCarga().add(vagonDePasajeros2)
		vagonDeCarga1.cargaMaxima(2000)
		vagonDeCarga2.cargaMaxima(3000)
		vagonDePasajeros1.ancho(2)
		vagonDePasajeros2.ancho(3)
		vagonDePasajeros1.largo(10)
		vagonDePasajeros2.largo(10)
		vagonDePasajeros1.pasajerosTransportados(20)
		vagonDePasajeros2.pasajerosTransportados(50)
				
		//El peso que arrastra la formación es de 22220
		
		assert.equals(9720,formacion1.cuantoEmpujeFalta())
	}
	
	test "Vagones más pesados de cada formación" {
		

	
	deposito.formaciones().add(formacion1)
	deposito.formaciones().add(formacion2)
	formacion1.vagonesDeCarga().add(vagonDeCarga1)
	formacion2.vagonesDeCarga().add(vagonDeCarga2)
	formacion1.vagonesDePasajeros().add(vagonDePasajeros1)
	formacion2.vagonesDePasajeros().add(vagonDePasajeros2)
	vagonDeCarga1.cargaTransportada(10000)
	vagonDeCarga2.cargaTransportada(10000)
	vagonDePasajeros1.pasajerosTransportados(50) //Peso = 4000 < vagonDeCarga1
	vagonDePasajeros2.pasajerosTransportados(1000) //Peso = 80000 > vagonDeCarga2
	
	var formaciones = [vagonDeCarga1,vagonDePasajeros2]
	
	assert.equals(formaciones,deposito.vagonesMasPesados())
	
	}

	test "Se necesita conductor experimentado" {
		
		deposito.formaciones().add(formacion1)
		deposito.formaciones().add(formacion2)
		deposito.formaciones().add(formacion3)
		formacion1.vagonesDeCarga().add(vagonDeCarga1)
		formacion1.vagonesDeCarga().add(vagonDeCarga2)
		vagonDeCarga1.cargaTransportada(7000)
		vagonDeCarga2.cargaTransportada(5000)
		
		assert.that(deposito.necesitaConductorExperimentado())
		
		vagonDeCarga1.cargaTransportada(1000)
		
		assert.notThat(deposito.necesitaConductorExperimentado())		
	}
	
	test "Agregar locomotora con empuje" {
		
		vagonDeCarga1.cargaMaxima(10000)
		vagonDeCarga2.cargaMaxima(10000)
		vagonDeCarga3.cargaMaxima(10000)
		vagonDeCarga4.cargaMaxima(20000)
		locomotora1.peso(1000) //Arrastre util = 24000
		locomotora1.pesoMaximoQueArrastra(25000)
		locomotora2.peso(1000) //Arrastre util = 24000
		locomotora2.pesoMaximoQueArrastra(25000)
		locomotora3.peso(1000) //Arrastre util = 24000
		locomotora3.pesoMaximoQueArrastra(25000)
		locomotora4.peso(5000) //Arrastre util = 5000
		locomotora4.pesoMaximoQueArrastra(10000)
		formacion1.locomotoras().add(locomotora1)
		formacion1.vagonesDeCarga().add(vagonDeCarga1)
		formacion1.vagonesDeCarga().add(vagonDeCarga2)
		//Formacion1: 24000 de arrastre útil vs 20320 de peso. 
		formacion2.locomotoras().add(locomotora2)
		formacion2.vagonesDeCarga().add(vagonDeCarga3)
		formacion2.vagonesDeCarga().add(vagonDeCarga4)
		//Formacion2: 24000 de arrastre útil vs 30320 de peso. Faltan 6320 kilos. 
		deposito.formaciones().add(formacion1)
		deposito.formaciones().add(formacion2)
		deposito.locomotorasSueltas().add(locomotora3) //Alcanza para la formación2.
		deposito.locomotorasSueltas().add(locomotora4) //No alcanza para la formación2. 
		
		deposito.agregarLocomotora(formacion2) //Agrega una locomotora para la formacion2.
		
		var locomotorasEnFormacion2 = [locomotora2,locomotora3]
		
		assert.equals(0,formacion1.cuantoEmpujeFalta())
		assert.equals(locomotorasEnFormacion2,formacion2.locomotoras())
	}

} //Fin describe